package ${bussiPackage}.controller.${entityPackage};

import java.util.Arrays;
import java.util.Date;
import java.util.List;
import javax.servlet.http.HttpServletRequest;
import com.sizatn.sz.common.model.Result;
import com.sizatn.sz.common.util.ResultUtil;
import org.apache.commons.lang3.StringUtils;
import ${bussiPackage}.entity.${entityPackage}.${entityName};
import ${bussiPackage}.service.${entityPackage}.I${entityName}Service;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.baomidou.mybatisplus.core.metadata.IPage;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import lombok.extern.slf4j.Slf4j;

/**
 * @desc ${tableVo.ftlDescription}
 * @author sizatn
 * @date ${.now?string["yyyy-MM-dd"]}
 */
@RestController
@RequestMapping("/${entityPackage}/${entityName?uncap_first}")
@Slf4j
public class ${entityName}Controller {

	@Autowired
	private I${entityName}Service ${entityName?uncap_first}Service;
	
	/**
	 * @desc 分页列表查询
	 * @param ${entityName?uncap_first}
	 * @param pageNo
	 * @param pageSize
	 * @param req
	 * @return
	 */
	@GetMapping(value = "/list")
	public Result<IPage<${entityName}>> queryPageList(${entityName} ${entityName?uncap_first},
									  @RequestParam(name = "pageNo", defaultValue = "1") Integer pageNo,
									  @RequestParam(name = "pageSize", defaultValue = "10") Integer pageSize,
									  HttpServletRequest req) {
		QueryWrapper<${entityName}> queryWrapper = new QueryWrapper<${entityName}>(${entityName?uncap_first});
		Page<${entityName}> page = new Page<${entityName}>(pageNo,pageSize);
		//排序逻辑 处理
		String column = req.getParameter("column");
		String order = req.getParameter("order");
		if(StringUtil.isNotEmpty(column) && StringUtil.isNotEmpty(order)) {
			if("asc".equals(order)) {
				queryWrapper.orderByAsc(StringUtil.camelToUnderline(column));
			} else {
				queryWrapper.orderByDesc(StringUtil.camelToUnderline(column));
			}
		}
		IPage<${entityName}> pageList = ${entityName?uncap_first}Service.page(page, queryWrapper);
		return ResultUtil.success("成功", pageList);
	}
	
	/**
	 * @desc 添加
	 * @param ${entityName?uncap_first}
	 * @return
	 */
	@PostMapping(value = "/add")
	public Result<${entityName}> add(@RequestBody ${entityName} ${entityName?uncap_first}) {
		try {
			${entityName?uncap_first}Service.save(${entityName?uncap_first});
			return ResultUtil.success("添加成功！");
		} catch (Exception e) {
			e.printStackTrace();
			log.info(e.getMessage());
		}
		return ResultUtil.error("操作失败");
	}
	
	/**
	 * @desc 编辑
	 * @param ${entityName?uncap_first}
	 * @return
	 */
	@PutMapping(value = "/edit")
	public Result<${entityName}> eidt(@RequestBody ${entityName} ${entityName?uncap_first}) {
		${entityName} ${entityName?uncap_first}Entity = ${entityName?uncap_first}Service.getById(${entityName?uncap_first}.getId());
		if(${entityName?uncap_first}Entity == null) {
			return ResultUtil.error("未找到对应实体");
		} else {
			boolean ok = ${entityName?uncap_first}Service.updateById(${entityName?uncap_first});
			//TODO 返回false说明什么？
			if(ok) {
				return ResultUtil.success("修改成功!");
			}
			return ResultUtil.error("修改失败");
		}
	}
	
	/**
	 * @desc 通过id删除
	 * @param id
	 * @return
	 */
	@DeleteMapping(value = "/delete")
	public Result<${entityName}> delete(@RequestParam(name = "id", required = true) String id) {
		${entityName} ${entityName?uncap_first} = ${entityName?uncap_first}Service.getById(id);
		if(${entityName?uncap_first} == null) {
			return ResultUtil.error("未找到对应实体");
		} else {
			boolean ok = ${entityName?uncap_first}Service.removeById(id);
			if(ok) {
				return ResultUtil.success("删除成功!");
			}
			return ResultUtil.error("删除失败");
		}
	}
	
	/**
	 * @desc 批量删除
	 * @param ids
	 * @return
	 */
	@DeleteMapping(value = "/deleteBatch")
	public Result<${entityName}> deleteBatch(@RequestParam(name = "ids", required = true) String ids) {
		if(ids == null || "".equals(ids.trim())) {
			return ResultUtil.error("参数不识别！");
		} else {
			this.${entityName?uncap_first}Service.removeByIds(Arrays.asList(ids.split(",")));
			return ResultUtil.success("删除成功!");
		}
	}
	
	/**
	 * @desc 通过id查询
	 * @param id
	 * @return
	 */
	@GetMapping(value = "/queryById")
	public Result<${entityName}> queryById(@RequestParam(name = "id", required = true) String id) {
		${entityName} ${entityName?uncap_first} = ${entityName?uncap_first}Service.getById(id);
		if(${entityName?uncap_first}==null) {
			return ResultUtil.error("未找到对应实体");
		} else {
			return ResultUtil.success("成功", ${entityName?uncap_first});
		}
	}

}
